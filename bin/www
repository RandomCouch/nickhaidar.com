#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('workspace:server');
var http = require('http');
var session = require('client-sessions');
var genuuid = function() {
  function s4() {
    return Math.floor((1 + Math.random()) * 0x10000)
      .toString(16)
      .substring(1);
  }
  return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
    s4() + '-' + s4() + s4() + s4();
};
app.use(session({
  genid: 'f94sahfsnkfjnw3hbybgfsllKJDpoIJA9dj0-qjIJNfn8H',
  cookieName: 'sess',
  secret: 'DAVIDLARIVIERE',
  duration: 520 * 60 * 1000,
  activeDuration: 520 * 60 * 1000,
  resave: true,
  saveUninitialized: true
}));

/**
 * Get port from environment and store in Express.
 */



var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
 // Array connections and then splice array on disconnect.
//var connections = [];
// connections.splice(connections.indexOf(socket), 1);

//    socket.disconnect();
//		console.log("Disconnected: %s sockets remaining", connections.length);




var server = http.createServer(app);
var io = require('socket.io')(server);
var connections = [];
/*
app.use(function(req,res,next){
  io.on('connection', function(socket){
    connections.push(socket);
    console.log('A user connected: ' + socket);
    socket.on('login', function(authToken){
      console.log("A user logged in: AuthToken: "  + authToken);
     // req.sess = {user: authToken};
    });
    socket.on('disconnect', function(){
      connections.splice(connections.indexOf(socket), 1);
      console.log('User disconnected: ' + connections.length + " remaining.");
    });
   
  });
});
*/
var userSession = {};
var onlineUsers = [];
var oUsers = [];
io.on('connection', function(socket){
    
  });
app.use(function(req,res,next){
    req.sess = userSession;
});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}



///  LYNDA.COM example \\\


// var express = require('express');

// var app = express();
// var connections = [];
// var title = 'Untitled Presentation';


// app.use(express.static('./public'));
// app.use(express.static('./node_modules/bootstrap/dist'));

// var server = app.listen(3000);
// var io = require('socket.io').listen(server);

// io.sockets.on('connection', function(socket) {
// 	socket.once('disconnect', function() {
// 		connections.splice(connections.indexOf(socket), 1);
// 		socket.disconnect();
// 		console.log("Disconnected: %s sockets remaining", connections.length);
// 	});

// socket.emit('welcome', {
// 	title: title
// });

// 	connections.push(socket);
//     console.log("Connected: %s", socket.id);
//     console.log("Connected: %s", connections.length);
// });

// console.log("Server running");
